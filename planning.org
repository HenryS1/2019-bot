* Planning the approach for the challenge

** Commands
- commands are either move x y, dig x y, shoot direction (one of N, S, E, W, NE, NW, SE, SW)

** Moving
- Worms can move to any adjacent air cells (including diagonally)
- Worms cannot move to cells occupied by another worm
- Worms cannot move to dirt or deep space cells
- If two worms move to same cell in the same turn:
  - Both worms will take damage
  - Worms will either swap places or stay in their current positions (with an equal probability)

** Digging 
- Worms can dig any adjacent dirt cells (including diagonally)
- Digging a dirt cells will change its type to air
- Two worms digging the same cell in the same turn is a valid move 

** Shooting
- Shots can be fired in all directions.

** Doing nothing
- Can also do nothing, but after 12 rounds doing nothing you lose

** Game details
- 33x33 board = 1089 squares. Squares can be DEEP_SPACE, AIR, or DIRT. 
- Two teams 
- Three worms each

** A turn
- Commands are ordered by: movement, digging, shooting
- A worm cannot move into a cell that another worm is digging open in this round
- A worm can dig open a path for another worm's shot
- A worm can move into range of another worm's shot
- A worm can move out of range of another worm's shot 
- Two worms can dig open the same dirt cell in a single round

** The board

- Need at least 18 64 bit integers to represent a 33x33 board
- Could have 33 64 bit integers to make access easy (one per row)
- 3 possible states, 4 if we include the presence of a worm. 
- Could represent all of this with 4x33 = 132 64 bit integers.
- May be worth track each worm's neighbourhood to evaluate moves

** Random move selection
- Find adjacent DIRT cells. Add possible digging moves.
- Find worms that are in range of a shot or one square out of firing line. Add possible shooting moves.
- Find neighbouring AIR cells. Add to possible moves.
- Exclude move combinations with friendly fire.
- Use a random number to select one of these for every worm.

** Simulation
- For each worm:
  - Randomly select a move
  - Evaluate selected moves in specified order
  - Remove unconscious worms

** Search tree 
- Branching factor is (at maximum) 65 * 6
- Each node in MCTS tree needs 390 integers
- May want to use Zobrist hashing to avoid loops



